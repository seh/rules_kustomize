# We must accommodate loading this file from repositories generated by
# our repository rules.
visibility("public")

_TOOLS_BY_RELEASE = {
    "v5.6.0": {
        struct(os = "darwin", arch = "amd64"): "3432be97f9fb4899148bf2485ccf9080e5e7702758eb16c92cd2f2f335e12a03",
        struct(os = "darwin", arch = "arm64"): "791d9497d2973d4af17c9c0c2b3991ce82e61d1a2bf79f4ef78dd9dce25a6d3d",
        struct(os = "linux", arch = "amd64"): "54e4031ddc4e7fc59e408da29e7c646e8e57b8088c51b84b3df0864f47b5148f",
        struct(os = "linux", arch = "arm64"): "ad8ab62d4f6d59a8afda0eec4ba2e5cd2f86bf1afeea4b78d06daac945eb0660",
        struct(os = "windows", arch = "amd64"): "f21d94e9660b4f11a47c4fdc26b936d513f8aada879e5c53553abd27369ef3a1",
        struct(os = "windows", arch = "arm64"): "4e55c1b175659fffea12552acc3d748387ecb49808b10458b5c9173777d70239",
    },
    "v5.5.0": {
        struct(os = "darwin", arch = "amd64"): "874224e75229821b1e571aefa45703789b77336302a34692eac65adbe0dc1cee",
        struct(os = "darwin", arch = "arm64"): "5baa407bdaee51b97626ef1fca3292e1a1c846357d3028db826057ecceed7178",
        struct(os = "linux", arch = "amd64"): "6703a3a70a0c47cf0b37694030b54f1175a9dfeb17b3818b623ed58b9dbc2a77",
        struct(os = "linux", arch = "arm64"): "b4170d1acb8cfacace9f72884bef957ff56efdcd4813b66e7604aabc8b57e93d",
        struct(os = "windows", arch = "amd64"): "a19684ae51f7a768f937f713780411cfb3945339a509294504daf9b87a77b642",
        struct(os = "windows", arch = "arm64"): "2e5c0072a048ecddb95d6d7489b90f773a6f325b36ac9892f541d0fd26421a43",
    },
    "v5.4.3": {
        struct(os = "darwin", arch = "amd64"): "6a708ef727594bbb5f2b8f9f8049375a6028d57fa8897c1f9e78effde4e403a2",
        struct(os = "darwin", arch = "arm64"): "3e159813a5feae46726fb22736b8764f2dbac83ba982c91ccd0244762456272c",
        struct(os = "linux", arch = "amd64"): "3669470b454d865c8184d6bce78df05e977c9aea31c30df3c669317d43bcc7a7",
        struct(os = "linux", arch = "arm64"): "1b515578b0af12c15d9856720066ce2fe66756d63785b2cbccaf2885beb2381c",
        struct(os = "windows", arch = "amd64"): "5ce680e51637bf7eed046b63601d3d4d9604a0e42ef7177c6a16a29f8e455a7f",
        struct(os = "windows", arch = "arm64"): "01283bc992c6888c9d20518d0385eb1005f3c66337814032a7876d8a354db664",
    },
    "v5.4.1": {
        struct(os = "darwin", arch = "amd64"): "112bde0d44d804c8fd70375bbd80ea7ef5224b18122283838372fd18f4fb1d64",
        struct(os = "darwin", arch = "arm64"): "522916f9b770b42c0e44747bb9e4e7c64bd9e294fe328d4359a005044d776554",
        struct(os = "linux", arch = "amd64"): "3d659a80398658d4fec4ec4ca184b432afa1d86451a60be63ca6e14311fc1c42",
        struct(os = "linux", arch = "arm64"): "123b9ce38e04a03de5907153ef7f16979027bad16d0763a304e59dcf69ac6d30",
        struct(os = "windows", arch = "amd64"): "9586f22645308fe073c3804e38cb23d32f8f5ebf96ece435c1e82ab893c3fc3e",
        struct(os = "windows", arch = "arm64"): "a09023d49347a299ff90ff7e55d31215b051b551735f8ea073087d06aea24d56",
    },
}

_DEFAULT_TOOL_VERSION = "v5.6.0"

def known_release_versions():
    return _TOOLS_BY_RELEASE.keys()

KustomizeInfo = provider(
    doc = "Details pertaining to the Kustomize toolchain.",
    fields = {
        "tool": "Kustomize tool to invoke",
        "version": "This tool's released version name",
    },
)

KustomizeToolInfo = provider(
    doc = "Details pertaining to the Kustomize tool.",
    fields = {
        "binary": "Kustomize tool to invoke",
        "version": "This tool's released version name",
    },
)

def _kustomize_tool_impl(ctx):
    return [KustomizeToolInfo(
        binary = ctx.executable.binary,
        version = ctx.attr.version,
    )]

kustomize_tool = rule(
    implementation = _kustomize_tool_impl,
    attrs = {
        "binary": attr.label(
            mandatory = True,
            allow_single_file = True,
            executable = True,
            cfg = "exec",
            doc = "Kustomize tool to invoke",
        ),
        "version": attr.string(
            mandatory = True,
            doc = "This tool's released version name",
        ),
    },
)

def _toolchain_impl(ctx):
    tool = ctx.attr.tool[KustomizeToolInfo]
    toolchain_info = platform_common.ToolchainInfo(
        kustomizeinfo = KustomizeInfo(
            tool = tool.binary,
            version = tool.version,
        ),
    )
    return [toolchain_info]

kustomize_toolchain = rule(
    implementation = _toolchain_impl,
    attrs = {
        "tool": attr.label(
            mandatory = True,
            providers = [KustomizeToolInfo],
            cfg = "exec",
            doc = "Kustomize tool to use for building kustomizations.",
        ),
    },
)

# buildifier: disable=unnamed-macro
def declare_kustomize_toolchains(kustomize_tool):
    for version, platforms in _TOOLS_BY_RELEASE.items():
        for platform in platforms.keys():
            kustomize_toolchain(
                name = "{}_{}_{}".format(platform.os, platform.arch, version),
                tool = kustomize_tool,
            )

def _translate_host_platform(ctx):
    # NB: This is adapted from rules_go's "_detect_host_platform" function.
    os = ctx.os.name
    if os == "mac os x":
        os = "darwin"
    elif os.startswith("windows"):
        os = "windows"

    arch = ctx.os.arch
    if arch == "aarch64":
        arch = "arm64"
    elif arch == "x86_64":
        arch = "amd64"

    return os, arch

_MODULE_REPOSITORY_NAME = "rules_kustomize"
_CONTAINING_PACKAGE_PREFIX = "//kustomize/private/tools/kustomize"

def _download_tool_impl(ctx):
    if not ctx.attr.arch and not ctx.attr.os:
        os, arch = _translate_host_platform(ctx)
    else:
        if not ctx.attr.arch:
            fail('"os" is set but "arch" is not')
        if not ctx.attr.os:
            fail('"arch" is set but "os" is not')
        os, arch = ctx.attr.os, ctx.attr.arch
    version = ctx.attr.version
    extension = ".zip" if os == "windows" else ".tar.gz"

    sha256sum = _TOOLS_BY_RELEASE[version][struct(os = os, arch = arch)]
    if not sha256sum:
        fail('No Kustomize tool is available for OS "{}" and CPU architecture "{}" at version {}'.format(os, arch, version))
    ctx.report_progress('Downloading Kustomize tool for OS "{}" and CPU architecture "{}" at version {}.'.format(os, arch, version))
    ctx.download_and_extract(
        url = "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F{version}/kustomize_{version}_{os}_{arch}{extension}".format(
            arch = arch,
            extension = extension,
            os = os,
            version = version,
        ),
        sha256 = sha256sum,
    )

    ctx.template(
        "BUILD.bazel",
        Label("{}:BUILD.tool.bazel".format(_CONTAINING_PACKAGE_PREFIX)),
        executable = False,
        substitutions = {
            "{containing_package_prefix}": "@{}{}".format(_MODULE_REPOSITORY_NAME, _CONTAINING_PACKAGE_PREFIX),
            # NB: In version 5.2.1, the released tools built for
            # Windows lacked an extension. Other releases use the
            # conventional ".exe" extension.
            "{extension}": ".exe" if os == "windows" and version != "v5.2.1" else "",
            "{version}": version,
        },
    )
    return None

_download_tool = repository_rule(
    implementation = _download_tool_impl,
    attrs = {
        "arch": attr.string(),
        "os": attr.string(),
        "version": attr.string(
            values = _TOOLS_BY_RELEASE.keys(),
            default = _DEFAULT_TOOL_VERSION,
        ),
    },
)

# buildifier: disable=unnamed-macro
def declare_bazel_toolchains(version, toolchain_prefix):
    native.constraint_value(
        name = version,
        constraint_setting = "{}:tool_version".format(_CONTAINING_PACKAGE_PREFIX),
    )
    constraint_value_prefix = "@{}//kustomize/private/tools".format(_MODULE_REPOSITORY_NAME)
    for platform in _TOOLS_BY_RELEASE[version].keys():
        native.toolchain(
            name = "{}_{}_{}_toolchain".format(platform.os, platform.arch, version),
            exec_compatible_with = [
                "{}:cpu_{}".format(constraint_value_prefix, platform.arch),
                "{}:os_{}".format(constraint_value_prefix, platform.os),
            ],
            toolchain = toolchain_prefix + (":{}_{}_{}".format(platform.os, platform.arch, version)),
            toolchain_type = "@{}//tools/kustomize:toolchain_type".format(_MODULE_REPOSITORY_NAME),
        )

def _toolchains_impl(ctx):
    ctx.template(
        "BUILD.bazel",
        Label("{}:BUILD.toolchains.bazel".format(_CONTAINING_PACKAGE_PREFIX)),
        executable = False,
        substitutions = {
            "{containing_package_prefix}": "@{}{}".format(_MODULE_REPOSITORY_NAME, _CONTAINING_PACKAGE_PREFIX),
            "{tool_repo}": ctx.attr.tool_repo,
            "{version}": ctx.attr.version,
        },
    )

_toolchains_repo = repository_rule(
    implementation = _toolchains_impl,
    attrs = {
        "tool_repo": attr.string(mandatory = True),
        "version": attr.string(
            values = _TOOLS_BY_RELEASE.keys(),
            default = _DEFAULT_TOOL_VERSION,
        ),
    },
)

def download_tool(name, version = None):
    _download_tool(
        name = name,
        version = version,
    )
    _toolchains_repo(
        name = name + "_toolchains",
        tool_repo = name,
        version = version,
    )
